{"version":3,"sources":["components/card/Card.jsx","components/card-list/CardList.jsx","components/search-box/SearchBox.jsx","components/scroll/Scroll.jsx","components/ErrorBoundry/ErrorBoundry.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Card","id","name","email","username","className","alt","src","CardList","robots","map","robot","index","key","SearchBox","onSearchChange","console","log","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","error","App","useState","robotFriends","searchField","robotSearch","setRobotSearch","fetchRobots","fetch","then","response","json","useEffect","length","e","preventDefault","target","value","results","filter","robotFriend","toLowerCase","includes","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"oRAgBeA,G,MAbF,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,GAAIC,EAA4B,EAA5BA,KAAgBC,GAAY,EAAtBC,SAAsB,EAAZD,OAElC,OACE,yBAAKE,UAAU,oEACb,yBAAKC,IAAI,UAAUC,IAAG,+BAA0BN,EAA1B,4BACtB,4BAAKC,GAEL,2BAAIC,MCIKK,EAVE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OACjB,OACE,yBAAKJ,UAAU,aACZI,EAAOC,KAAI,SAACC,EAAOC,GAClB,OAAO,kBAAC,EAAD,CAAMC,IAAKD,EAAOX,GAAIU,EAAMV,GAAIC,KAAMS,EAAMT,KAAME,SAAUO,EAAMP,SAAUD,MAAOQ,EAAMR,aCOzFW,EAbG,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,eAGnB,OAFAC,QAAQC,IAAIF,GAGV,yBAAKV,UAAU,MACb,2BAAOA,UAAU,mCACfa,KAAK,SACLC,YAAY,gBACZC,SAAUL,MCAHM,EARA,SAACC,GACd,OACE,yBAAKC,MAAO,CAAEC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,UACnEJ,EAAMK,WCYEC,EAZM,SAACN,GACpBN,QAAQC,IAAIK,EAAMK,UAElB,IACE,OAAOL,EAAMK,SACb,MAAOE,GAEP,OADAb,QAAQC,IAAIY,GACJ,0DCoDGC,G,MAtDH,WACV,IADgB,EAKsBC,mBAJlB,CAClBC,aAAc,GACdC,YAAa,KAHC,mBAKTC,EALS,KAKIC,EALJ,KAMRH,EAA8BE,EAA9BF,aAAcC,EAAgBC,EAAhBD,YAEhBG,EAAc,WAClBC,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAA7B,GAAM,OAAI0B,EAAe,CAAEH,aAAcvB,EAAQwB,YAAa,SAGxEQ,qBAAU,WACRL,IACApB,QAAQC,IAAI,WAEX,IAiBH,OAFAD,QAAQC,IAAIe,GAKV,yBAAK3B,UAAU,UACb,wBAAIA,UAAU,MAAd,iBAEyB,IAAxB2B,EAAaU,OAAgB,0CAC3B,kBAAC,WAAD,KACC,kBAAC,EAAD,CAAW3B,eAtBI,SAAC4B,GAEtB,GADAA,EAAEC,iBACqB,KAAnBD,EAAEE,OAAOC,MAAc,CAEzB,IAAIC,EAAUf,EAAagB,QAAO,SAAAC,GAAW,OAAIA,EAAY/C,KAAKgD,cAAcC,SAASlB,EAAYiB,kBACrGf,EAAe,2BAAKD,GAAN,IAAmBF,aAAce,EAASd,YAAaU,EAAEE,OAAOC,cAG9EV,OAeI,kBAAC,EAAD,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAU3B,OAAQuB,U,MC5CZoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1B,MAAK,SAAA2B,GACJA,EAAaC,gBAEdC,OAAM,SAAAtC,GACLb,QAAQa,MAAMA,EAAMuC,c","file":"static/js/main.ac0ee610.chunk.js","sourcesContent":["import React from 'react';\nimport './Card.css'\n\nconst Card = ({ id, name, username, email }) => {\n\n  return (\n    <div className='card-container bg-light-green dib br3 pa3 ma2 grow bw-2 shadow-5'>\n      <img alt=\"monster\" src={`https://robohash.org/${id}?set=set3&size=200x200`} />\n      <h2>{name}</h2>\n      {/* <p>{username}</p> */}\n      <p>{email}</p>\n\n    </div>\n  )\n}\n\nexport default Card;","import React from 'react'\nimport Card from \"../card/Card\";\n\n\nconst CardList = ({robots}) => {\n  return (\n    <div className='card-list'>\n      {robots.map((robot, index) => {\n        return <Card key={index} id={robot.id} name={robot.name} username={robot.username} email={robot.email} />\n      })}\n    </div>\n  )\n}\n\nexport default CardList\n","import React from 'react'\n\nconst SearchBox = ({ onSearchChange }) => {\n  console.log(onSearchChange);\n\n  return (\n    <div className='p2'>\n      <input className='pa3 ba b--green bg-lightest-blue'\n        type='search'\n        placeholder='Search Robots'\n        onChange={onSearchChange} />\n    </div>\n  )\n}\n\nexport default SearchBox\n","import React from 'react'\n\nconst Scroll = (props) => {\n  return (\n    <div style={{ overflowY: 'scroll', border: '1px solid black', height: '500px' }}>\n      {props.children}\n    </div>\n  )\n}\n\nexport default Scroll;\n","//Error Boundary only exist for class components but you can use a try catch to do the same thing since there is no hook version of componentdidcatch. To see the the class version see below functional component \n\n\nimport React from 'react'\n\nconst ErrorBoundry = (props) => {\n  console.log(props.children);\n\n  try {\n    return props.children\n  } catch (error) {\n    console.log(error);\n    return (<h1>Something has went wrong</h1>)\n\n  }\n}\n\nexport default ErrorBoundry;\n\n\n// import React, { Component, Fragment } from 'react'\n\n// class ErrorBoundry extends Component {\n\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       hasError: false\n//     }\n//   }\n\n//   componentDidCatch(error, info) {\n//     this.setState({ hasError: true })\n//     console.log(error);\n\n//   }\n\n//   render() {\n//     console.log(this.props)\n//     console.log(this.state.hasError)\n//     return (\n//       <Fragment>\n//         {(this.state.hasError === false) ?\n//           (this.props.children) : (<h1>Something has went wrong</h1>)}\n//       </Fragment>)\n//   }\n// };\n\n// export default ErrorBoundry;","import React, { useState, useEffect, Fragment } from 'react';\nimport CardList from \"./components/card-list/CardList\";\nimport SearchBox from \"./components/search-box/SearchBox\";\nimport Scroll from \"./components/scroll/Scroll\";\nimport ErrorBoundry from \"./components/ErrorBoundry/ErrorBoundry\";\n//import { robots } from './robots';\n\nimport './App.css';\n\n\nconst App = () => {\n  const initalState = {\n    robotFriends: [],\n    searchField: \"\",\n  }\n  const [robotSearch, setRobotSearch] = useState(initalState)\n  const { robotFriends, searchField } = robotSearch;\n\n  const fetchRobots = () => {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => response.json())\n      .then(robots => setRobotSearch({ robotFriends: robots, searchField: \"\" }))\n  }\n\n  useEffect(() => {\n    fetchRobots()\n    console.log(\"I ran\");\n\n  }, [])\n\n\n  const onSearchChange = (e) => {\n    e.preventDefault();\n    if (e.target.value !== '') {\n      //console.log(e.target.value);\n      let results = robotFriends.filter(robotFriend => robotFriend.name.toLowerCase().includes(searchField.toLowerCase()))\n      setRobotSearch({ ...robotSearch, robotFriends: results, searchField: e.target.value }\n      )\n    } else {\n      fetchRobots();\n    }\n  }\n\n  console.log(robotFriends);\n\n  return (\n\n\n    <div className='App tc'>\n      <h1 className='f1'>Robot Friends</h1>\n\n      {robotFriends.length === 0 ? (<h1>Loading...</h1>) :\n        (<Fragment>\n          <SearchBox onSearchChange={onSearchChange} />\n          <Scroll>\n            <ErrorBoundry>\n              <CardList robots={robotFriends} />\n            </ErrorBoundry>\n          </Scroll>\n        </Fragment>)}\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'tachyons';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}